<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Manga Recommendations</title>

    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png" />
    <link rel="manifest" href="site.webmanifest" />
    <link rel="mask-icon" href="safari-pinned-tab.svg" color="#5bbad5" />
    <meta name="msapplication-TileColor" content="#da532c" />
    <meta name="theme-color" content="#0b1622" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <meta name="application-name" content="Manga Recommendations" />
    <meta name="theme-color" content="#444444" />

    <meta property="og:url" content="https://brutuz.github.io/anilist-recs" />
    <meta name="twitter:url" content="https://brutuz.github.io/anilist-recs" />
    <meta name="twitter:dnt" content="on" />

    <meta property="og:type" content="website" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:site_name" content="Manga Recommendations" />

    <meta itemprop="name" content="Manga Recommendations" />
    <meta property="og:title" content="Manga Recommendations" />
    <meta property="og:image:alt" content="Manga Recommendations" />
    <meta name="twitter:title" content="Manga Recommendations" />
    <meta name="twitter:image:alt" content="Manga Recommendations" />

    <meta
      itemprop="description"
      content="Show manga recommendations across all your currently reading entries from AniList"
    />
    <meta
      name="description"
      content="Show manga recommendations across all your currently reading entries from AniList"
    />
    <meta
      property="og:description"
      content="Show manga recommendations across all your currently reading entries from AniList"
    />
    <meta
      name="twitter:description"
      content="Show manga recommendations across all your currently reading entries from AniList"
    />

    <meta
      itemprop="image"
      content="https://brutuz.github.io/anilist-recs/android-chrome-512x512.png"
    />
    <meta
      property="og:image"
      content="https://brutuz.github.io/anilist-recs/android-chrome-512x512.png"
    />
    <meta
      property="og:image:url"
      content="https://brutuz.github.io/anilist-recs/android-chrome-512x512.png"
    />
    <meta
      property="og:image:secure_url"
      content="https://brutuz.github.io/anilist-recs/android-chrome-512x512.png"
    />
    <meta
      name="twitter:image"
      content="https://brutuz.github.io/anilist-recs/android-chrome-512x512.png"
    />
    <meta
      name="twitter:image:src"
      content="https://brutuz.github.io/anilist-recs/android-chrome-512x512.png"
    />

    <meta name="twitter:card" content="summary" />

    <style>
      body {
        background-color: #0b1622;
        color: #9fadbd;
        font-family: Roboto, -apple-system, BlinkMacSystemFont, Segoe UI, Oxygen, Ubuntu, Cantarell,
          Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
      }
      div.entry.filtered {
        display: none !important;
      }
      div.entry:not(.filtered):nth-child(even) {
        background-color: #151f2e;
      }
      img {
        border-radius: 3%;
      }
      .cover,
      .recs {
        border-width: 1px 0;
        display: flex;
        flex-flow: wrap;
        justify-content: space-evenly;
      }
      .container {
        width: 80%;
        position: absolute;
        left: 10%;
        text-align: center;
      }
      .settings {
        display: flex;
        flex-flow: wrap;
        justify-content: space-evenly;
        margin: 0.5em;
        text-align: center;
      }
      .cover {
        grid-area: cover;
      }
      .recs {
        grid-area: sources;
      }
      .title {
        grid-area: title;
      }
      .details {
        grid-area: details;
      }
      .entry {
        display: grid;
        grid-template-areas: 'cover title details' 'sources title details';
        grid-template-columns: 300px 1fr 1fr;
        grid-template-rows: repeat(2, auto);
        /* column-gap: 10px; */
        /* row-gap: 3px; */
        margin-bottom: 1em;
        padding: 5px;
        border-radius: 10px;
      }
      .entry > div {
        padding: 1.5px 0.5em;
      }
      .title > div,
      .details > div {
        margin: 0;
        position: relative;
        text-align: justify;
        top: 50%;
        transform: translateY(-50%);
      }
      .details > div {
        display: inline-flex;
        flex-direction: column;
        justify-content: space-evenly;
        gap: 20px;
      }
      .title h3 {
        font-weight: 400;
      }
      .title > div > p,
      .details > div > p {
        margin: 0;
      }
      .tag {
        border-radius: 10px;
        background-color: #d3e7f3;
        display: inline-block;
        margin: 0.25em;
        padding: 0.25em;
        color: #1b4964;
        cursor: pointer;
      }
      .tag.filtered {
        background-color: #81f066;
      }
      .header {
        border: 0 none;
        text-align: center;
      }
      .header > .title {
        margin-top: 0.5em;
      }
    </style>
    <link
      rel="preload"
      as="style"
      type="text/css"
      onload="this.onload=null;this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
    />
  </head>
  <body>
    <div class="container">
      <span class="settings">
        <span>
          <form id="login">
            <input id="username" placeholder="AniList Username" />
            <button type="submit">OK</button>
          </form>
        </span>
        <span>
          <label for="adult">NSFW</label>
          <select id="adult">
            <option>Only</option>
            <option>None</option>
            <option selected="true">Both</option>
          </select>
        </span>
        <span>
          <input type="checkbox" checked="true" id="englishTitles" />
          <label for="englishTitles">Prefer English Titles</label>
        </span>
        <span>
          <input type="checkbox" checked="true" id="subRecs" />
          <label for="subRecs">Sub-Recomendations</label>
        </span>
      </span>
      <div class="entry even header">
        <div class="cover">Cover and<br />Connected Entries</div>
        <div class="title">Titles</div>
        <div class="details">Description<br />and Tags</div>
      </div>
      <div class="content">
        <noscript><h1>This page requires JavaScript</h1></noscript>
        <h1>╰(￣ω￣ｏ)<br />Fill your username</h1>
      </div>
    </div>
    <script>
      const table = document.querySelector('.content');
      let data = null;
      let recs,
        ignore = [];
      // fetchData();
      async function fetchData() {
        table.innerHTML = '<h1>Calling AniList API...<br />(This may take a while)</h1>';
        // const response = await fetch('./mangarecs.json');
        const response = await fetch('https://graphql.anilist.co', {
          method: 'post',
          mode: 'cors',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'Cache-Control': 'max-stale=36000, force-cache, private',
          },
          cache: 'force-cache',
          body: JSON.stringify({
            query:
              'query($user:String){collection:MediaListCollection(userName:$user,type:MANGA,perChunk:500,chunk:1,status_in:[CURRENT,COMPLETED],forceSingleCompletedList:true,sort:UPDATED_TIME_DESC){hasNextChunk statuses:lists{status name list:entries{manga:media{title{romaji english native}synonyms id url:siteUrl tags{name isMediaSpoiler}cover:coverImage{medium large}description countryOfOrigin isAdult recommendations(sort:RATING_DESC){entries:nodes{rating mediaRecommendation{title{romaji english native}synonyms id url:siteUrl tags{name isMediaSpoiler}cover:coverImage{medium large}description countryOfOrigin isAdult recommendations(sort:RATING_DESC){entries:nodes{rating mediaRecommendation{title{romaji english native}synonyms id url:siteUrl tags{name isMediaSpoiler}cover:coverImage{medium large}description countryOfOrigin isAdult}}}}}}}}}}}',
            variables: { user: document.querySelector('#username').value },
          }),
        });
        if (!response.ok) {
          window.alert(`Oops!\n${response.status} - ${response.statusText}`);
          return false;
        }
        const json = await response.json();
        data = json.data;
        parseData(data);
      }

      function parseRecs(manga) {
        manga.recommendations.entries.forEach(entry => {
          const rec = entry.mediaRecommendation;
          if (
            !rec ||
            ignore.includes(rec.id) ||
            rec.isAdult == document.querySelector('#adult').selectedIndex ||
            rec.countryOfOrigin != 'JP'
            // || e.rating < 1
          )
            return;
          if (recs.find(e => e.id == rec.id)) {
            const index = recs.findIndex(e => e.id == rec.id);
            recs[index].recommended.push({
              cover: manga.cover.medium || manga.cover.large,
              title: manga.title.english || manga.title.romaji,
              url: manga.url,
            });
            return;
          } else {
            rec.recommended = [
              {
                cover: manga.cover.medium || manga.cover.large,
                title: manga.title.english || manga.title.romaji,
                url: manga.url,
              },
            ];
            recs.push(rec);
            if (rec.recommendations && document.querySelector('#subRecs').checked) {
              parseRecs(rec);
            }
          }
        });
      }

      function parseData(data) {
        if (!data) {
          console.log('Nothing to parse!');
          return false;
        }
        console.log('Parsing...');
        const englishTitles = document.querySelector('#englishTitles').checked;
        table.innerHTML = '';
        const completed = data.collection.statuses
          .find(s => s.status == 'COMPLETED')
          .list.map(entry => entry.manga);
        const current = data.collection.statuses
          .find(s => s.status == 'CURRENT')
          .list.map(e => e.manga);
        ignore = [...completed.map(m => m.id), ...current.map(m => m.id)];
        recs = [];

        console.log('Currents...');
        current.forEach(manga => parseRecs(manga));
        console.log('Currents DONE');

        recs
          // .sort((a, b) => b.recommended.length - a.recommended.length)
          .forEach(rec => {
            const entry = document.createElement('div');
            const cell = document.createElement('div');
            const text = document.createElement('p');

            const link = document.createElement('a');
            const img = document.createElement('img');

            entry.classList.add('entry');
            entry.id = rec.id;

            // COVER + URL
            link.target = '_blank';
            link.href = rec.url;

            img.width = 250;
            img.loading = 'lazy';
            img.src = rec.cover.large;

            link.appendChild(img.cloneNode(true));
            cell.appendChild(link.cloneNode(true));
            cell.classList.add('cover');
            entry.appendChild(cell.cloneNode(true));
            cell.removeAttribute('class');

            // CONNECTIONS
            cell.innerHTML = '';
            cell.classList.add('recs');
            img.width = 75;
            rec.recommended.forEach(origin => {
              link.innerHTML = '';
              link.target = '_blank';
              link.href = origin.url;
              img.src = origin.cover;
              img.title = origin.title;
              img.alt = origin.title;
              link.appendChild(img.cloneNode(true));
              cell.appendChild(link.cloneNode(true));
            });
            entry.appendChild(cell.cloneNode(true));
            cell.removeAttribute('class');

            // TITLE
            cell.innerHTML = '';
            const textContainer = document.createElement('div');
            const header = document.createElement('h3');
            const title = englishTitles ? rec.title.english || rec.title.romaji : rec.title.romaji;
            header.textContent = rec.isAdult ? `🔞 ${title}` : title;
            textContainer.appendChild(header.cloneNode(true));

            const altTitles = [
              ...new Set([rec.title.english, rec.title.romaji, ...rec.synonyms, rec.title.native]),
            ]
              .filter(i => (i && i != title ? i : false))
              .join('\n• ');
            if (altTitles) {
              text.innerText = `• ${altTitles}`;
              textContainer.appendChild(text.cloneNode(true));
            }
            cell.appendChild(textContainer.cloneNode(true));

            cell.classList.add('title');
            entry.appendChild(cell.cloneNode(true));
            cell.removeAttribute('class');

            // DESCRIPTION
            cell.innerHTML = '';
            textContainer.innerHTML = '';
            text.innerHTML = rec.description || '<i>&lt;Empty Description&gt;</i>';
            textContainer.appendChild(text.cloneNode(true));

            text.innerHTML = '';
            rec.tags
              ?.filter(tag => !tag.isMediaSpoiler)
              .map(tag => tag.name)
              .forEach(tag => {
                const container = document.createElement('div');
                container.append(tag);
                container.className = 'tag';
                container.dataset.tag = tag;
                text.appendChild(container);
              });
            if (text.innerHTML) textContainer.appendChild(text.cloneNode(true));

            cell.appendChild(textContainer.cloneNode(true));
            cell.classList.add('details');
            entry.appendChild(cell.cloneNode(true));
            cell.removeAttribute('class');

            table.appendChild(entry.cloneNode(true));
          });
        document
          .querySelectorAll('.tag')
          .forEach(tagContainer => tagContainer.addEventListener('click', filterTag, false));
        console.log('Parsed!');
      }

      function filterTag(ev) {
        ev.preventDefault();
        document
          .querySelectorAll(`div.entry:not(.header, :has([data-tag="${this.dataset.tag}"])`)
          .forEach(entry => {
            entry.classList.toggle('filtered');
          });
        document.querySelectorAll(`[data-tag="${this.dataset.tag}"]`).forEach(tag => {
          tag.classList.toggle('filtered');
        });
      }

      document.addEventListener('DOMContentLoaded', () => {
        document
          .querySelectorAll('#adult, #englishTitles, #subRecs')
          .forEach(el => el.addEventListener('change', event => parseData(data)));
        document.querySelector('#login').addEventListener('submit', event => {
          event.preventDefault();
          fetchData();
        });
      });
    </script>
  </body>
</html>
